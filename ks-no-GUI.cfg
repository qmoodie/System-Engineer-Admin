%pre
# Ask for variables
iotty=`tty`
exec > $iotty 2> $iotty
ISOMOUNT=$(mount | grep -i iso | awk '{print $1}')
ISOHASH=$(sha256sum /dev/sr0 | awk '{print $1}')
SYSCONFIG=0
until [ "$SYSCONFIG" -eq 1 ]
do
 DRIVES=$(lsblk | grep -i disk | grep -vi swap |awk '{print $1, $4}' | tr '\ ' '\t')
 echo "###########################################################"
 echo "                                                           "
 echo "        TEST REDHAT 9 SERVER KICKSTART ISO                 "
 #echo "        ISO HASH: $ISOHASH                                 "
 echo "        Built from the following git repos:                "
 echo "https://llcad-github.llan.ll.mit.edu/elcn/rh8server-kickstart"
 echo "https://llcad-github.llan.ll.mit.edu/elcn/rh8-security-controls"
 echo "                                                           "
 #echo "    RH8 SERVER KICKSTART - COMMIT: 6167e47bb12b656f941e58601a1bef19096a364c         "
 #echo "    RH8 SECURITY CONTROLS - COMMIT: 1f98781069f08667dbb9a0214c30fc7e10202470          "
 echo "                                                           "
 echo " Below is a list of drives visible to the install media    "
 echo "                                                           "
 echo "  ################################                         "
 echo "     DRIVE        SIZE in GB                               "
 echo "  ################################                         "
 echo "     $DRIVES                                               "
 echo "  ################################                         "
 echo "                                                           "
 echo "     For issues please contact ISD-CES@ll.mit.edu          "
 echo "                                                           "
 echo "###########################################################"
 echo "NOTE"
 echo -n "If you do not see a drive above, please stop now check that the disk is available."
 echo ""
 echo -n "Type the drive name from above to install on: "
 read ROOTDRIVE
 echo -n "Enter the hostname: "
 read HOSTNAME
 echo -n "Enter the IP address: "
 read IPADDRESS
 echo -n "Enter the Gateway IP address: "
 read GATEWAY
 echo -n "Enter Netmask in IP address format. Example: 255.255.255.0: "
 read NETMASK
 LUKSCONFIGURE=0
 until [ "$LUKSCONFIGURE" -eq 1 ]
 do
  echo "Are we configuring LUKS?"
  echo "Type yes or no"
  read LUKSANSWER
  if [ "$LUKSANSWER" = yes ]
  then
   echo -n "Enter the LUKS password to be used for decrypting drive on boot: "
   read LUKSPASS
   LUKSCONFIGURE=1
  elif [ "$LUKSANSWER" = no ]
  then
   echo "We are not configuring LUKS on this system."
   LUKSCONFIGURE=1
  else
   echo "Not an answer, please try again."
   LUKSCONFIGURE=0
  fi
 done
 echo -n "Enter root password: "
 read ROOTPW
 echo -n "Set GRUB password: "
 read GRUBPW
 FINALANSWER=0
 until [ "$FINALANSWER" -eq 1 ]
 do
  echo "Are all the above settings correct? Type yes or no"
  read ANSWER
  if [ "$ANSWER" = yes ]
  then
   echo -n "Settings are finalized, will proceed with automated install now."
   FINALANSWER=1
   SYSCONFIG=1
  elif [ "$ANSWER" = no ]
  then
   echo "Settings are not correct. We will start over."
   FINALANSWER=1
   SYSCONFIG=0
   clear
  else
   echo "Not an answer, please try again."
   FINALANSWER=0
  fi
 done
done

cat << EOF > /tmp/hostname
network --bootproto=static --ip=$IPADDRESS --netmask=$NETMASK --gateway=$GATEWAY --hostname=$HOSTNAME
EOF

#Python command to make a sha512 hash of password given

ROOTSHA512=$(/usr/libexec/platform-python -c 'import crypt; print(crypt.crypt("'$ROOTPW'", crypt.mksalt(crypt.METHOD_SHA512)))')
cat << EOF > /tmp/rootpwconfig
rootpw --iscrypted --allow-ssh $ROOTSHA512
EOF

#Grub command to generate grub password
# This generates the grub passwod hash to be used in the next command
GRUBSHA512=$(printf "$GRUBPW\n$GRUBPW" | grub2-mkpasswd-pbkdf2 | grep -v 'password:' | cut -d. -f 5,6)

cat << EOF > /tmp/grubcommandpw
bootloader --iscrypted --location=mbr --password=grub.pbkdf2.sha512.10000.$GRUBSHA512 --append="quiet audit=1 audit_backlog_limit=8192 fips=1 pti=on vsyscall=none slub_debug=P page_poison=1"
EOF

echo ""
echo -n "ROOTDRIVE=$ROOTDRIVE"
echo ""

#Determine whether system is UEFI or Legacy

# /var/tmp satisfies RHEL-08-010544
# /home satisfies RHEL-08-010590, RHEL-08-010570, RHEL-08-010800
# /boot/efi  satisfies RHEL-08-010572
if [ -d /sys/firmware/efi ]; then
 cat >> /tmp/partition <<END
ignoredisk --only-use=$ROOTDRIVE  
zerombr
clearpart --drives=$ROOTDRIVE --initlabel --all
part /boot --asprimary --fstype="xfs" --fsoptions="nodev,nosuid" --size=512 --ondisk=$ROOTDRIVE
part /boot/efi --fstype="efi" --fsoptions="nodev,nosuid" --size=512 --ondisk=$ROOTDRIVE
part pv.1337  --asprimary --grow --size=1 --ondisk=$ROOTDRIVE --encrypted --passphrase=$LUKSPASS
volgroup VolGroup00 --pesize=4096 pv.1337
logvol swap --fstype="swap" --name=LogVol01 --vgname=VolGroup00 --size=2048
logvol /home --fstype="xfs" --fsoptions="noexec,nodev,nosuid" --name=LogVol02 --vgname=VolGroup00 --size=1024
logvol /var --fstype="xfs" --fsoptions="nodev,nosuid" --name=LogVol03 --vgname=VolGroup00 --size=8192
logvol /var/tmp --fstype="xfs" --fsoptions="nodev,nosuid,noexec" --name=LogVol04 --vgname=VolGroup00 --size=4096
logvol /var/log --fstype="xfs" --fsoptions="nodev,nosuid,noexec" --name=LogVol05 --vgname=VolGroup00 --size=2048
logvol /var/log/audit --fstype="xfs" --fsoptions="nodev,nosuid,noexec" --name=LogVol06 --vgname=VolGroup00 --size=2048
logvol /tmp --fstype="xfs" --fsoptions="nodev,nosuid,noexec" --name=LogVol07 --vgname=VolGroup00 --size=4096
logvol /opt --fstype="xfs" --fsoptions="nodev,nosuid" --name=LogVol08 --vgname=VolGroup00 --size=4096
logvol / --fstype="xfs" --name=LogVol00 --vgname=VolGroup00 --size=8192
END

else

 cat >> /tmp/partition <<END
ignoredisk --only-use=$ROOTDRIVE  
zerombr
clearpart --drives=$ROOTDRIVE --initlabel --all
part /boot --asprimary --fstype="xfs" --fsoptions="nodev,nosuid" --size=512 --ondisk=$ROOTDRIVE
part pv.1337  --asprimary --grow --size=1 --ondisk=$ROOTDRIVE --encrypted --passphrase=$LUKSPASS
volgroup VolGroup00 --pesize=4096 pv.1337
logvol swap --fstype="swap" --name=LogVol01 --vgname=VolGroup00 --size=2048
logvol /home --fstype="xfs" --fsoptions="nodev,nosuid" --name=LogVol02 --vgname=VolGroup00 --size=1024
logvol /var --fstype="xfs" --fsoptions="nodev,nosuid" --name=LogVol03 --vgname=VolGroup00 --size=8192
logvol /var/tmp --fstype="xfs" --fsoptions="nodev,nosuid,noexec" --name=LogVol04 --vgname=VolGroup00 --size=4096
logvol /var/log --fstype="xfs" --fsoptions="nodev,nosuid,noexec" --name=LogVol05 --vgname=VolGroup00 --size=2048
logvol /var/log/audit --fstype="xfs" --fsoptions="nodev,nosuid,noexec" --name=LogVol06 --vgname=VolGroup00 --size=2048
logvol /tmp --fstype="xfs" --fsoptions="nodev,nosuid,noexec" --name=LogVol07 --vgname=VolGroup00 --size=4096
logvol /opt --fstype="xfs" --fsoptions="nodev,nosuid" --name=LogVol08 --vgname=VolGroup00 --size=4096
logvol / --fstype="xfs" --name=LogVol00 --vgname=VolGroup00 --size=8192
END
fi

if [ "$LUKSANSWER" == no ]
 then
  sed -i 's/\-\-encrypted.*//g' /tmp/partition
fi

%end
%include /tmp/partition
%include /tmp/hostname
%include /tmp/rootpwconfig
%include /tmp/grubcommandpw


text
firstboot --disable
lang en_US.UTF-8
keyboard us
xconfig --startxonboot  --defaultdesktop=gnome
timezone America/New_York --utc
reboot
eula --agreed
cdrom
authselect select sssd --force
firewall --enabled --ssh 
services --disabled="kdump"
selinux --enforcing


%packages
@^server-product-environment
@security-tools
scap-workbench
@development
fapolicyd
libreswan
yum-utils
sysstat
lynx
openssl-pkcs11
gnutls-utils
kernel-devel
chrony
aide
gcc
tmux
sssd
autofs
esc
samba
krb5-workstation
realmd
audispd-plugins
openssh-server
usbguard
clevis*
selinux-policy
opensc
setroubleshoot
libselinux-utils
selinux-policy-targeted
java-11-openjdk-devel
libselinux
cockpit-ws
cockpit-storaged
java-11-openjdk
rhel-system-roles
rng-tools
-abrt*
-cheese
#-pigz* required by dracut
-rhythmbox
-rsh*
-telnet*
-tftp*
-vsftpd
-ypserv*


%end
%addon com_redhat_kdump --disable --reserve-mb='auto'
%end
%post --nochroot
post_log=/mnt/sysimage/root/ks_post.log
set -x
{
mkdir -p /mnt/sysimage/root/security_controls
cp -R /mnt/install/repo/security_controls/* /mnt/sysimage/root/security_controls/
} >> $post_log 2>&1
%end
%post
post_log=/root/ks_post.log
set -x
{

echo "Copy rc"
cp -a /etc/rc.d/rc.local /root/rc.local.orig

echo "Appending to /etc/rc.d/rc.local"
cat <<EOF >>/etc/rc.d/rc.local
bash /root/bootinstall.sh
EOF

chmod 755 /etc/rc.d/rc.local

cat <<EOF >>/root/bootinstall.sh
#!/bin/bash
set -x
{

# Run custom script

bash -x /root/security_controls/scripts/no-gui/one-time-script.sh

# Move original rc.local back
cp -f /root/rc.local.orig /etc/rc.d/rc.local
restorecon -v /etc/rc.d/rc.local
}
EOF

cat << EOF > /etc/tmux.conf
set -g lock-command vlock
set -g lock-after-time 900
set -g mouse on
set -g history-limit 20000
EOF

rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
fips-mode-setup --enable

# Scanning system

# oscap xccdf eval --datastream-id scap_org.open-scap_datastream_from_xccdf_ssg-rhel9-xccdf.xml --xccdf-id scap_org.open-scap_cref_ssg-rhel9-xccdf.xml --profile xccdf_org.ssgproject.content_profile_stig_gui --oval-results --results /root/security_controls/xccdf-results.xml --results-arf /root/security_controls/arf.xml --report /root/security_controls/oscap-results.html /root/security_controls/ssg-rhel9-ds.xml

chmod +x /root/security_controls/scripts/no-gui/*.sh
chmod +x /root/bootinstall.sh

# create first boot file
touch /tmp/first_boot

exit

rm -f /mnt/stage
} >> $post_log 2>&1
%end
reboot --eject
